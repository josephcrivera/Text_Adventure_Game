/*Class Parser * This parser reads user input and tries to interpret it as a  * command. Every time it is called it reads a line from the terminal and * tries to interpret the line as a two word command. It returns the command * as an object of class Command. * * The parser has a set of known command words. It checks user input against * the known commands, and if the input is not one of the known commands, it * returns a command object that is marked as an unknown command. */import java.util.Scanner;class Parser {    private CommandWords commands;  // holds all valid command words	//create an object commands of type CommandWords()    public Parser()     {        commands = new CommandWords();    }	/*1. Create 3 strings, input line, word1, and word2, and	 *initialize them to "".	 *2. Print "> " to the screen as the prompt.	 *3. Initialize a scanner and read a line of text.	 *4. Declare a String array named myCommands and initialize	 *   it to inputLine.split(" ")  This will split the input into 	 *   multiple words and store each in a slot in the array.	 *5. Check if myCommands length is 1, and if so set word 1 	 *   to myCommands[0], and word2 to null.  Else set word1	 *	 to myCommands[0] and word2 to myCommands[1]	 *6. Use the isCommand() method of the command object to check if	 *   word1 is a command.  If it is, return new Command(word1, word2),	 *   else return new Command(null, word2)	 *	 *	 *	 */    public Command getCommand()     {        String inputLine = "";   // will hold the full input line        String word1;        String word2;        System.out.print("> ");     // print prompt                 Scanner reader = new Scanner(System.in);                    inputLine = reader.nextLine();        String[] myCommands = inputLine.split(" ");        if (myCommands.length==1)        {        	word1=myCommands[0];        	word2=null;        }        else        {        	word1=myCommands[0];        	word2=myCommands[1];		}              if(commands.isCommand(word1))            return new Command(word1, word2);        else            return new Command(null, word2);                }    /**     * Print out a list of valid command words using     * the showAll() method of the commands object.     */    public void showCommands()    {        commands.showAll();    }}