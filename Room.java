/* * Class Room - a room in an adventure game. * * "Room" represents one location in the scenery of the game.  It is  * connected to at most four other rooms via exits.  The exits are labelled * north, east, south, west.  For each direction, the room stores a reference * to the neighboring room, or null if there is no exit in that direction. */import java.util.Set;import java.util.HashMap;import java.util.Iterator;import java.util.ArrayList;class Room {    private String description;    private Room[] exits=new Room[4]; // stores actual rooms that are exits from this room.    private String stringExits="Exits: "; //stores the string containing exits of this room.    private ArrayList <Item> items=new ArrayList();        //stores the items currently in the room.    /**     * Create a room described "description". Initially, it has no exits.     * "description" is something like "a kitchen" or "an open court yard".     */    public Room(String description)     {        this.description = description;           }    public void setDescription(String d)    {    	description=d;    }       /**     * Define the exits of this room.  Every direction either leads to     * another room or is null (no exit there).     * 1.  Set each place each room into the exits[] array of rooms.     * exits[0]= north, exits[1]=east, etc.     * 2.  Check each entered room to see if its not null.  If it isn't,     *  add the word to the stringExits String.  Ex. stringExits+="north ";     */    public void setExits(Room north, Room east, Room south, Room west)     {        stringExits = "Exits: ";        exits[0]=north;exits[1]=east;exits[2]=south;exits[3]=west;        if(north != null)        {        	stringExits+="north ";        }                    if(east != null)        {        	stringExits+="east ";        }                    if(south != null)        {        	stringExits+="south ";        }                    if(west != null)        {        	stringExits+="west ";        }                }    //add an item to the room using the items ArrayList    public void addItem(Item i)    {    	items.add(i);    }        //display description of items in the room    public String listItems()    {    	String output="";    	    	if(items.size()!=0)    	{			for(int x=0; x<items.size(); x++)			{			output=output+items.get(x).getName()+" ";			}			return "\nItems in the room: "+output;		    	}    	return "";    }    //loop through the items ArrayList to check if the item is in the room    //if it is, return the item, else return null.    public Item checkItemInRoom(String s)	{		for(int x=0; x<items.size(); x++)		{			if (items.get(x).getName().equals(s))				return items.get(x);		}		return null;	}    //remove an item from the room	// first use an if statement to 	//checkInventory() and see if its not null	//meaning that you have the item.  If that's ok,	//do a loop through items and if the .getName() of	//the item equals s, then remove it from the	//inventory	public void removeItem(String s)	{		if (checkItemInRoom(s)!=null)		{			for(int x=0; x<items.size(); x++)			{				if (items.get(x).getName().equals(s))				{									items.remove(x);				}			}		}	}    /**     * Return description.     *      */    public String shortDescription()    {        return description;    }    /**     * Return a long description of this room, in this form:     *     You are in the kitchen.     *     Exits: north west     *     Items in the room: knife     *   Be sure to use a call to exitString and listItems for the last two parts.     */    public String longDescription()    {        return description + ".\n" + exitString() + listItems();    }    /**     * Return a string describing the room's exits, for example     * "Exits: north west ".     * Just return the stringExits string.     */    private String exitString()    {             return stringExits;    }    /**     * Return the room that is reached if we go from this room in direction     * "direction". Else, return null.  This happens if they put something like      * "go sideways", a direction that does not exist in our game.     *Ex. if (direction.equals("north")) return exits[0]     */    public Room nextRoom(String direction)     {        if (direction.equals("north"))        {        	return exits[0];        }        else if (direction.equals("east"))        {        	return exits[1];        }        else if (direction.equals("south"))        {        	return exits[2];        }        else if (direction.equals("west"))        {        	return exits[3];        }        else        {        	return null;        }    }}